// Generated by dts-bundle v0.7.2

declare module 'BookKeeper' {
    import ChartOfAccounts from 'BookKeeper/ChartOfAccounts';
    import Period from 'BookKeeper/Period';
    import BankruptError from 'BookKeeper/BankruptError';
    import ACCOUNT_TYPE from 'BookKeeper/ACCOUNT_TYPE';
    var _default: {
        ChartOfAccounts: typeof ChartOfAccounts;
        Period: typeof Period;
        BankruptError: typeof BankruptError;
        ACCOUNT_TYPE: typeof ACCOUNT_TYPE;
    };
    export default _default;
}

declare module 'BookKeeper/ChartOfAccounts' {
    import SummaryAccount from 'BookKeeper/SummaryAccount';
    export default class ChartOfAccounts {
        readonly assets: SummaryAccount;
        readonly liabilities: SummaryAccount;
        readonly income: SummaryAccount;
        readonly expenses: SummaryAccount;
        readonly equity: SummaryAccount;
        readonly changesToEquity: SummaryAccount;
        readonly generalLedger: SummaryAccount;
        constructor();
        toString(): string;
    }
}

declare module 'BookKeeper/Period' {
    import ChartOfAccounts from 'BookKeeper/ChartOfAccounts';
    import SubAccount from 'BookKeeper/SubAccount';
    import { default as JournalEntry, JournalEntryItem } from 'BookKeeper/JournalEntry';
    import IncomeStatement from 'BookKeeper/IncomeStatement';
    import BalanceSheet from 'BookKeeper/BalanceSheet';
    export type closeFunction = () => void;
    export default class Period {
        readonly period: any;
        readonly coa: ChartOfAccounts;
        journal: JournalEntry[];
        autoClose: closeFunction;
        closed: boolean;
        constructor(period: any, coa: ChartOfAccounts, autoClose?: closeFunction);
        close(closer?: closeFunction): void;
        journalEntry(description: string, amount: number, debit: SubAccount, credit: SubAccount): void;
        compoundJournalEntry(description: string, debits: JournalEntryItem[], credits: JournalEntryItem[]): void;
        readonly financialStatements: {
            balanceSheet: BalanceSheet;
            incomeStatement: IncomeStatement;
        };
        readonly balanceSheet: BalanceSheet;
        readonly incomeStatement: IncomeStatement;
        printJournal(): string;
        toString(): string;
    }
}

declare module 'BookKeeper/BankruptError' {
    import Period from 'BookKeeper/Period';
    export default class BankruptError extends Error {
        readonly period: Period;
        constructor(message: string, period: Period);
    }
}

declare module 'BookKeeper/ACCOUNT_TYPE' {
    enum ACCOUNT_TYPE {
        DEBIT_NORMAL = 0,
        CREDIT_NORMAL = 1,
    }
    export default ACCOUNT_TYPE;
}

declare module 'BookKeeper/SummaryAccount' {
    import ACCOUNT_TYPE from 'BookKeeper/ACCOUNT_TYPE';
    import Account from 'BookKeeper/Account';
    import SubAccount from 'BookKeeper/SubAccount';
    export default class SummaryAccount extends Account {
        readonly name: string;
        readonly defaultSubAccountType: ACCOUNT_TYPE;
        readonly subAccounts: Account[];
        constructor(name: string, defaultSubAccountType: ACCOUNT_TYPE, subAccounts?: Account[]);
        readonly debits: number[];
        readonly credits: number[];
        readonly balance: number;
        subAccount(name: string, accountType?: ACCOUNT_TYPE): SubAccount;
    }
}

declare module 'BookKeeper/SubAccount' {
    import Account from 'BookKeeper/Account';
    export default class SubAccount extends Account {
        debit(amount: number): void;
        readonly debits: number[];
        credit(amount: number): void;
        readonly credits: number[];
        readonly balance: number;
    }
}

declare module 'BookKeeper/JournalEntry' {
    import SubAccount from 'BookKeeper/SubAccount';
    export interface JournalEntryItem {
        amount: number;
        account: SubAccount;
    }
    export default class JournalEntry {
        readonly description: string;
        readonly debits: JournalEntryItem[];
        readonly credits: JournalEntryItem[];
        constructor(description: string, debits: JournalEntryItem[], credits: JournalEntryItem[]);
        print(maxLen?: number, decimals?: number, indent?: string): string;
        toString(): string;
    }
}

declare module 'BookKeeper/IncomeStatement' {
    import ChartOfAccounts from 'BookKeeper/ChartOfAccounts';
    import { AccountSnapshot } from 'BookKeeper/Report';
    export default class IncomeStatement {
        readonly income: AccountSnapshot;
        readonly expenses: AccountSnapshot;
        readonly changesToEquity: AccountSnapshot;
        readonly netIncome: number;
        constructor(coa: ChartOfAccounts);
        toString(): string;
    }
}

declare module 'BookKeeper/BalanceSheet' {
    import ChartOfAccounts from 'BookKeeper/ChartOfAccounts';
    import { AccountSnapshot } from 'BookKeeper/Report';
    export default class BalanceSheet {
        readonly assets: AccountSnapshot;
        readonly liabilities: AccountSnapshot;
        readonly equity: AccountSnapshot;
        readonly netWorth: number;
        constructor(coa: ChartOfAccounts);
        toString(): string;
    }
}

declare module 'BookKeeper/Account' {
    import ACCOUNT_TYPE from 'BookKeeper/ACCOUNT_TYPE';
    abstract class Account {
        readonly name: string;
        readonly accountType: ACCOUNT_TYPE;
        constructor(name: string, accountType: ACCOUNT_TYPE);
        readonly abstract debits: number[];
        readonly abstract credits: number[];
        readonly abstract balance: number;
        toString(): string;
        print(): string;
    }
    export default Account;
}

declare module 'BookKeeper/Report' {
    import Account from 'BookKeeper/Account';
    interface AccountSnapshot {
        name: string;
        balance: number;
        subAccounts: AccountSnapshot[];
    }
    const formatCurrency: (amount: number) => string;
    const snapshotAccount: (acct: Account) => {
        name: string;
        balance: number;
        subAccounts: AccountSnapshot[];
    };
    const snapshotBalance: (name: string, balance: number) => AccountSnapshot;
    const formatSnapshots: (accts: {
        [id: string]: AccountSnapshot[];
    }) => {
        [id: string]: string[];
    };
    export { AccountSnapshot, snapshotAccount, snapshotBalance, formatSnapshots, formatCurrency };
}

