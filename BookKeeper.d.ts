// Generated by dts-bundle v0.7.2

declare module 'BookKeeper' {
    import ChartOfAccounts from 'BookKeeper/ChartOfAccounts';
    import Period from 'BookKeeper/Period';
    import BankruptError from 'BookKeeper/BankruptError';
    import DebitAccount from 'BookKeeper/DebitAccount';
    import CreditAccount from 'BookKeeper/CreditAccount';
    var _default: {
        ChartOfAccounts: typeof ChartOfAccounts;
        DebitAccount: typeof DebitAccount;
        CreditAccount: typeof CreditAccount;
        Period: typeof Period;
        BankruptError: typeof BankruptError;
    };
    export default _default;
}

declare module 'BookKeeper/ChartOfAccounts' {
    import JournalEntry from 'BookKeeper/JournalEntry';
    import Account from 'BookKeeper/Account';
    import Period from 'BookKeeper/Period';
    export default class ChartOfAccounts {
        bsaccts: Account[];
        isaccts: Account[];
        eqaccts: Account[];
        journal: JournalEntry[];
        total: number;
        readonly incomeStatementAccounts: Account[];
        readonly balanceSheetAccounts: Account[];
        readonly equityAccounts: Account[];
        readonly accounts: Account[];
        incomeStatementAccount(acct: Account): void;
        balanceSheetAccount(acct: Account): void;
        equityAccount(acct: Account): void;
        journalEntry(period: Period, descr: string, amount: number, debit: Account, credit: Account): JournalEntry;
        logJournalEntry(je: JournalEntry): void;
    }
}

declare module 'BookKeeper/Period' {
    import ChartOfAccounts from 'BookKeeper/ChartOfAccounts';
    import JournalEntry from 'BookKeeper/JournalEntry';
    import IncomeStatement from 'BookKeeper/IncomeStatement';
    import BalanceSheet from 'BookKeeper/BalanceSheet';
    import FinancialStatements from 'BookKeeper/FinancialStatements';
    export default class Period {
        period: any;
        coa: ChartOfAccounts;
        journal: JournalEntry[];
        total: number;
        autoClose: () => never;
        closed: boolean;
        financialStatements: FinancialStatements;
        constructor(period: any, coa: ChartOfAccounts, autoClose: boolean);
        logJournalEntry(je: JournalEntry): void;
        close(closer: () => never): void;
        readonly balanceSheet: BalanceSheet;
        readonly incomeStatement: IncomeStatement;
    }
}

declare module 'BookKeeper/BankruptError' {
    import Period from 'BookKeeper/Period';
    export default class BankruptError extends Error {
        readonly period: Period;
        constructor(message: string, period: Period);
    }
}

declare module 'BookKeeper/DebitAccount' {
    import Account from 'BookKeeper/Account';
    export default class DebitAccount extends Account {
        readonly balance: number;
    }
}

declare module 'BookKeeper/CreditAccount' {
    import Account from 'BookKeeper/Account';
    export default class CreditAccount extends Account {
        readonly balance: number;
    }
}

declare module 'BookKeeper/JournalEntry' {
    import ChartOfAccounts from 'BookKeeper/ChartOfAccounts';
    import Period from 'BookKeeper/Period';
    import Account from 'BookKeeper/Account';
    export default class JournalEntry {
        readonly period: Period;
        readonly description: string;
        readonly amount: number;
        constructor(coa: ChartOfAccounts, period: Period, description: string, amount: number, debit: Account, credit: Account);
    }
}

declare module 'BookKeeper/Account' {
    import JournalEntry from 'BookKeeper/JournalEntry';
    abstract class Account {
        name: string;
        debits: JournalEntry[];
        debit_total: number;
        credits: JournalEntry[];
        credit_total: number;
        constructor(name: string);
        debit(je: JournalEntry): void;
        credit(je: JournalEntry): void;
        readonly abstract balance: number;
    }
    export default Account;
}

declare module 'BookKeeper/IncomeStatement' {
    import Account from 'BookKeeper/Account';
    export default class IncomeStatement {
        income: any;
        incomeTotal: number;
        expenses: any;
        expensesTotal: number;
        netIncome: number;
        constructor(isaccts: Account[]);
    }
}

declare module 'BookKeeper/BalanceSheet' {
    import Account from 'BookKeeper/Account';
    export default class BalanceSheet {
        assets: any;
        assetsTotal: number;
        liabilities: any;
        liabilitiesTotal: number;
        equity: any;
        equityTotal: number;
        netWorth: number;
        constructor(bsaccts: Account[], eqaccts: Account[]);
    }
}

declare module 'BookKeeper/FinancialStatements' {
    import IncomeStatement from 'BookKeeper/IncomeStatement';
    import BalanceSheet from 'BookKeeper/BalanceSheet';
    export default class FinancialStatements {
        readonly incomeStatement: IncomeStatement;
        readonly balanceSheet: BalanceSheet;
        constructor(incomeStatement: IncomeStatement, balanceSheet: BalanceSheet);
    }
}

